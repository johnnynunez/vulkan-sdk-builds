name: Build LLVM (matrix)

on:
  workflow_dispatch:
    inputs:
      llvm_pin:
        description: "Commit SHA, tag (e.g. llvmorg-21.1.1), or ref for llvm/llvm-project"
        required: false
        default: llvmorg-21.1.1
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-15, windows-2025]

    # Fallback order: manual input → repo/org variable → default stable tag
    env:
      LLVM_PIN: ${{ github.event.inputs.llvm_pin || vars.LLVM_PIN || 'llvmorg-21.1.1' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # ---------- Prereqs ----------
      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake ninja-build build-essential
          python -m pip install --upgrade pip

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja || true
          python3 -m pip install --upgrade pip

      - name: Install prerequisites (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja cmake
          git config --global core.autocrlf false

      # ---------- Compute install prefix ----------
      - name: Compute install prefix
        id: prefix
        run: |
          set -euo pipefail
          if [ "${RUNNER_OS}" = "Windows" ]; then
            echo "prefix=${RUNNER_TEMP}\\llvm-install" >> "$GITHUB_OUTPUT"
          else
            echo "prefix=${RUNNER_TEMP}/llvm-install" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Build *nix ----------
      - name: Build (Linux & macOS)
        if: runner.os != 'Windows'
        env:
          CMAKE_INSTALL_PREFIX: ${{ steps.prefix.outputs.prefix }}
        run: |
          set -euo pipefail
          echo "Using LLVM_PIN=${LLVM_PIN}"

          mkdir -p llvm-project
          cd llvm-project
          git init
          git remote add origin https://github.com/llvm/llvm-project.git
          git fetch --depth 1 origin "${LLVM_PIN}"
          git checkout --detach FETCH_HEAD

          python3 -m pip install -r mlir/python/requirements.txt

          cmake -S llvm -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_BUILD_UTILS=ON -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_ENABLE_PROJECTS="clang;lld;mlir" \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DLLVM_TARGETS_TO_BUILD="host;NVPTX;AMDGPU" \
            -DLLVM_ENABLE_TERMINFO=OFF

          cmake --build build --target all -- -k 0
          cmake --build build --target check-mlir
          cmake --build build --target install

      # ---------- Build Windows ----------
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CMAKE_INSTALL_PREFIX: ${{ steps.prefix.outputs.prefix }}
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Using LLVM_PIN=$env:LLVM_PIN"

          New-Item -ItemType Directory -Force -Path llvm-project | Out-Null
          Set-Location llvm-project
          git init
          git remote add origin https://github.com/llvm/llvm-project.git
          git fetch --depth 1 origin "$env:LLVM_PIN"
          git checkout --detach FETCH_HEAD

          python -m pip install -r mlir/python/requirements.txt

          cmake -S llvm -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="$env:CMAKE_INSTALL_PREFIX" `
            -DLLVM_ENABLE_ASSERTIONS=ON `
            -DLLVM_BUILD_UTILS=ON -DLLVM_BUILD_TOOLS=ON `
            -DLLVM_INSTALL_UTILS=ON `
            -DLLVM_ENABLE_PROJECTS="clang;lld;mlir" `
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON `
            -DLLVM_TARGETS_TO_BUILD="host;NVPTX;AMDGPU" `
            -DLLVM_ENABLE_TERMINFO=OFF

          cmake --build build --target all
          cmake --build build --target check-mlir
          cmake --build build --target install

      # ---------- Artifact ----------
      - name: Archive install (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: llvm-install-${{ matrix.os }}
          path: ${{ steps.prefix.outputs.prefix }}
          if-no-files-found: warn
